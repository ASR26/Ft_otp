#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "rikrdo"
__copyright__ = "Copyright 2022, Bootcamp Cybersec "
__credits__ = ["rikrdo"]
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "rikrdo"
__email__ = "rikrdo@rikrdo.es"
__status__ = "Production"

#importamos todas las librerías necesarias para la aplicación
import base64, os, argparse, hmac, time, io, qrcode, getpass
from cryptography.fernet import Fernet
from time import sleep
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# encriptamos los archivos
def encrypt(filename, enc_key, flag):
    try: # intentamos encriptar la key que se ha proporcionado
        key = enc_key
        print
        fernet = Fernet(key)
        with open(filename, 'rb') as files: # leemos el archivo donde estará la contraseña
          	original = files.read()
        encrypted = fernet.encrypt(original) # encriptamos el contenido
        with open(filename, 'wb') as encrypted_files:
           	encrypted_files.write(encrypted) # guardamos los datos encriptados en otro archivo
    except: #si da error imprime un mensaje mostrando como debería ser la key
        print('\033[91mFAIL! Your encryption key must be 32 url-safe base64-encoded bytes. ex. ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=\033[0m\n')
        print('Try with something like this: \033[1m\033[92m', to_safe(enc_key),'\033[0m\033[0m\n')
        main()

# guardamos la key dada en un archivo
def save_key(key, filename, enc_key, flag):
    secret = bytes(key, 'utf-8').hex() # codificamos la key en utf-8 y en hexadecimal
    f = open(filename, 'w') # abrimos un archivo para escritura
    f.write(secret) # escribimos la key codificada
    f.close() # cerramos el archivo
    f.closed
    qr = qrcode.QRCode() # creamos el código qr
    key = bytes(key, 'utf-8') # asignamos a la key el valor de la key en utf-8
    key = base64.b32encode(key) # encriptamos la key en base64
    qr.add_data('otpauth://totp/asolano-@cybersec.es?secret='+str(key, 'utf-8')+'&issuer=ft_otp') # añadimos los datos al qr
    if flag == True: # si se ha introducido la flag imprimimos la key en utf-8
        print(str(key, 'utf-8'))
    else: # si no hay flag imprimimos los mensajes siguientes
        print('\nNew Hex Secret:\n\n\033[1m', secret, '\033[0m\n')
        print('URI for Google Authenticator\n\n\033[1motpauth://totp/asolano-@cybersec.es?secret='+str(key, 'utf-8')+'&issuer=ft_otp\033[0m')
        f = io.StringIO() # se da a f el valor de un string vacío
        qr.print_ascii(out=f) # imprimimos en ascii en el qr el valor de f
        f.seek(0)
        print(f.read()) # imprimimos el valor de f
    sleep(.5) # esperamos medio segundo
    encrypt(filename, enc_key, flag) # llamamos a la función encrypt
    
# logica de token HMAC (un código de autentificación en hash)
def totp(key, interval):
    key = bytes.fromhex(key) # decodificamos de hexadecimal la key
    """ Calculate TOTP using time and key """
    now = int(time.time() // interval) #usamos el tiempo y la llave para sacar una contraseña temporal
    msg = now.to_bytes(8, "big") # imprimimos la nueva key
    digest = hmac.new(key, msg, "sha1").digest() # guardamos la nueva key digerida 
    offset = digest[19] & 15 # le damos un offset a la key 
    code = digest[offset : offset + 4] 
    code = (int.from_bytes(code, "big") & 0x7FFFFFFF) % 1000000
    return "{:06d}".format(code)
       
# decrypt files
def decrypt(filename, enc_key, flag):
    try:
        if os.path.isfile('./'+filename):
            key = enc_key

            fernet = Fernet(key)

            with open(filename, 'rb') as enc_file:
                encrypted = enc_file.read()

            decrypted = fernet.decrypt(encrypted)
            interval = 30
            key = (decrypted.decode('UTF-8'))
            if flag == True:
                print(totp(key, interval))
            else:
                print('\nTemporary Key (',str(interval),' secs ): \033[1m\033[92m', totp(key, interval),'\033[0m\033[0m')
        else:
            if os.path.isfile('./'+filename) == False:
                print('\033[91m\t[', filename, '] File not exist, first, you need to create a key file! \u2716\033[0m')
            else:
                print('\033[91m\t[', filename, '] Unencrypted File! \u2716\033[0m')
    except:
        print('\n\033[91m\u2718 \033[0m Wrong Password!')
        
def to_safe(enc_safe):
    password = bytes(enc_safe, 'utf-8')
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=390000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(password))
    key = str(key, 'utf-8')
    return(key)

def check_key(key):
    secret = bytes(key, 'utf-8').hex()
    if len(secret) < 64:
        return(False)
    else:
        return(True)

def exit_gracefully():
    print('\033[91m\n\n------------------------\n\n   @@@ Bye Bye!!! @@@\n\n------------------------\033[0m')
    
def main(): 
    parser = argparse.ArgumentParser()
    parser.add_argument('-g', help = 'keep the given ex64 key in a encrypted file')
    parser.add_argument('-k', action = 'store_true' ,help = 'show temporary token')
    parser.add_argument('-f', default= 'ft_otp.key' ,help='save the key in the given filename')
    parser.add_argument('-p', action = 'store_true' , help='ask to introduce your favorite key')
    parser.add_argument('-s', help='encode a URL-safe string in base64')
    parser.add_argument('-php', action = 'store_true' ,help='internal command for php process')
    args = parser.parse_args()  
    
    key = args.g
    filename = args.f
    enc_key = '2j3XrJLoNkrAzI0GCRl5IvAgCJPxgPxWI5QfCV8AZkY=%'
    enc_safe = args.s
    flag = args.php

    if args.s:
        print('\nVerified safe key: \033[1m\033[92m', to_safe(enc_safe),'\033[0m\033[0m\n')
    if args.g:
        if (check_key(key)) == False:
            print('\nYou key: \033[1m\033[91m', key,'\033[0m\033[0m has less than 64 characters, try again!\n')
        else:
            if args.p:
                passby = True
                while passby:
                    enc_key = getpass.getpass(prompt = '\nPlease enter your password?: ')
                    if len(enc_key) < 16:
                        print('Your password should be more than 16 characters!')
                        passby = True
                    else:
                        passby = False
                        save_key(key, filename, enc_key, flag)
            else:
                save_key(key, filename, enc_key, flag)
    if args.k:
        if args.p:
            passby = True
            while passby:
                enc_key = getpass.getpass(prompt = '\nPlease enter your password?: ')
                if len(enc_key) < 16:
                    print('Your password should be more than 16 characters!')
                    passby = True
                else:
                    passby = False
                    decrypt(filename, enc_key, flag)
        else:
            decrypt(filename, enc_key, flag)

if __name__=='__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\n\n\n\033[91m\u2718 \033[0m Wrong Keyboard Combination!')
        exit_gracefully()
    finally:
    	pass
